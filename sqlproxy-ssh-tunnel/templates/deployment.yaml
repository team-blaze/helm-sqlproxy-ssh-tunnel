apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{.Values.name}}
  labels:
    app: {{.Values.name}}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{.Values.name}}
  template:
    metadata:
      name: {{.Values.name}}
      labels:
        app: {{.Values.name}}
    spec:
      dnsPolicy: ClusterFirst
{{- if .Values.cloudsql.useWorkloadIdentity }}
      serviceAccountName: {{.Values.cloudsql.serviceAccountName}}
      tolerations:
      - key: "workload-identity"
        operator: "Equal"
        value: "enabled"
        effect: "NoSchedule"
      nodeSelector:
        workload-identity: "enabled"
{{- end }}
      containers:
        - name: {{.Values.name}}
          image: {{.Values.image}}
          imagePullPolicy: Always
          resources:
            requests:
              cpu: 1m
              memory: 10Mi
          ports:
            - containerPort: 22
              protocol: TCP
          volumeMounts:
            - name: authorized-keys
              mountPath: /home/sshuser/.ssh/authorized_keys_temp
              subPath: authorized_keys
              readOnly: true
            - name: server-key
              mountPath: /etc/ssh/ssh_host_ed25519_key
              subPath: ssh_host_ed25519_key
              readOnly: true
            - name: sshd-config
              mountPath: /etc/ssh/sshd_config
              subPath: sshd_config
              readOnly: true
        - name: sqlproxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.37.1-alpine
          resources:
            requests:
              cpu: 1m
              memory: 10Mi
          command:
            - /cloud_sql_proxy
            - -log_debug_stdout=true
            - -instances={{- range .Values.cloudsql.instances -}}
                           {{ .project }}:{{ .region }}:{{ .instance }}=tcp:0.0.0.0:{{ .port }},
                         {{- end }}
{{- if not .Values.cloudsql.useWorkloadIdentity }}
            - -credential_file=/secrets/cloudsql/sql_credentials.json
          volumeMounts:
            - name: sqlproxy-credential
              mountPath: /secrets/cloudsql
              readOnly: true
{{- end }}
{{- if .Values.reverseTunnel }}
        - name: reverse-tunnel
          image: {{.Values.image}}
          imagePullPolicy: Always
          resources:
            requests:
              cpu: 1m
              memory: 10Mi
          command:
            - /entrypoint-reverse-tunnel.sh
          env:
            - name: PORT_BINDING
              value: "{{.Values.reverseTunnel.remoteDbPort}}:127.0.0.1:{{.Values.reverseTunnel.localDbPort}}"
            - name: SSH_LOGIN
              value: "{{.Values.reverseTunnel.sshUser}}@{{.Values.reverseTunnel.sshHost}}"
          volumeMounts:
            - name: reverse-tunnel-private-key
              mountPath: /root/reverse_tunnel_ed25519
              subPath: reverse_tunnel_ed25519
              readOnly: true
{{- end }}
      volumes:
        - name: sshd-config
          configMap:
            name: sshd-config
        - name: authorized-keys
          secret:
            defaultMode: 0600
            secretName: authorized-keys
        - name: server-key
          secret:
            defaultMode: 0600
            secretName: server-key
        - name: reverse-tunnel-private-key
          secret:
            defaultMode: 0600
            secretName: reverse-tunnel-private-key
{{- if not .Values.cloudsql.useWorkloadIdentity }}
        - name: sqlproxy-credential
          secret:
            secretName: sqlproxy-credential
{{- end }}
